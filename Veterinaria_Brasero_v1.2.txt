;        |                                 /   \                   |       .
;  _    -O-       .                )      ((   ))     (           -O-
; (@)    |     +                  /|\      ))_((     /|\           |            .
; |-|                            / | \    (/\|/\)   / | \                            (@)
; | | --------------------------/--|-voV---\`|'/--Vov-|--\---------------------------|-|         .
; |-|                                '^`   (o o)  '^`                                | |
; | |                                      `\Y/'                                     |-|
; |-|   _______ __ __   __                  _______ __ __                            | |
; | |  |   |   |  |  |_|__|.--------.---.-.|   _   |  |__|.---.-.-----.-----.---.-.  |-|    .     o
; |-|  |   |   |  |   _|  ||        |  _  ||       |  |  ||  _  |     |-- __|  _  |  | |
; | |  |_______|__|____|__||__|__|__|___._||___|___|__|__||___._|__|__|_____|___._|  |-|
; |_|________________________________________________________________________________| |
; (@)                     l   /\ /         ( (          \ /\   l                   `\|-|             .
;           o             l /   V           \ \          V   \ l       +             (@)
;                         l/                _) )_             \I                                 +
;      +                                    `\ /'
;
;         .----. 
;        ===(_)==   THIS WONT HURT A BIT...
;       // 6  6 \\  /
;       (    7   )
;        \ '--' /
;         \_ ._/
;        __)  (__
;     /"`/`\`V/`\`\
;    /   \  `Y _/_ \
;   / [DR]\_ |/ / /\
;   |     ( \/ / / /
;   \  \  \      /
;     \  `-/`  _.`
; jgs  `=._`=./
;
; Script Name: Veterinaria con Brasero
; Author: Sthil Lauda
; Version: 1.2
; Client Tested with: 2.0.3
; EUO version tested with: 1.5 Version 142
; Shard OSI / FS: Ultima Alianza ¡Hasta la muerte!
; Revision Date: 13/04/2020
; Public Release: 15/07/2019
; Purpose: Aplica vendas a un animal encima de un brasero, para subir veterinaria.
;________________________________
;
; ///////////////////////////////
; ******** CONFIGURACIÓN ********
; ///////////////////////////////
;________________________________
;
set %max_vendas_sucias 50 ; Máximo de vendas sucias antes de limpiarlas.
set %tiempo_alimentacion 360 ; Cada cuantos segundos comprobar el hambre del pj, y comer si es necesario.
;________________________________________________
;
; //////////////////////////////////////////////
; ************* FIN CONFIGURACIÓN *************
; //////////////////////////////////////////////
;________________________________________________
;
set %vendas_limpias ZLF
set %vendas_sucias AMF
set %pilones TEE_QEE_WEE_VEE
set %comida RGG_NRD_QSD_ZBG_WLI_QRD_END_FUD_YLI_WLI_HGI
 +_KGI_EGI_QLI_KLI_MLI_KRD_HQD_AQD_MQE_VQE_TQE_JQE_IQE
 +_GQE_SPE_ZPE_OQE_BDF_KPE_RQE_YSD_SQD_YWI_AXI_PQD_QQD
set %proxima_vez #SCNT

finditem %pilones C_ , #BACKPACKID
if #FINDKIND = -1 ; Si no hay ninguno, paramos.
   {
     event exmsg #charid 0 89 CONSIGUE UN PILON DE AGUA!!
     wait 1s
   }
   else
      {
        set %pilon #FINDID
        set #SYSMSGCOL 53
        event sysmessage OK: pilon %pilon
        wait 2s
      }
event sysmessage Haz click en el animal que quieres curar
wait 20
set #TARGCURS 1
target
while #TARGCURS = 1
      {
        wait 5
      }
set #SYSMSGCOL 18
set %animal #LTARGETID
event sysmessage OK Animal: %animal
wait 40

loop:
set %tiempo_actual #SCNT
if %proxima_vez <= %tiempo_actual
   {
     gosub comprobar_comida
   }
gosub limpiavendas
gosub curar
goto loop

sub limpiavendas ; <==========================>
finditem %vendas_sucias C_ , #BACKPACKID
if #FINDSTACK >= %max_vendas_sucias
   {
     set #LOBJECTID #FINDID
     finditem %pilones C_ , #BACKPACKID
     if #FINDCNT > 0
        {
          event macro 17 0
          target 3s
          set #LTARGETID #FINDID
          set #LTARGETKIND 1
          event macro 22
          wait 20
        }
   }
return

sub curar ; <==========================>
set %jstart #jindex
finditem %vendas_limpias C_ , #BACKPACKID
if #FINDCNT > 0
   {
     set #LOBJECTID #FindID
     event Macro 17 0
     target 3s
     set #LTARGETID %animal
     set #LTARGETKIND 1
     event macro 22 0
     wait 10
   }
   else ; No hay vendas!
      {        
        event macro 1 0 all come
        wait 5s
        event macro 1 0 all stop
        wait 20
        set #SYSMSGCOL 38
        event sysmessage NO HAY VENDAS!! :-(
        halt
      }
gosub wait_for MSG aplicas_las pones_el_vendas curas_a pero_fallas no_necesita_curarse estas_demasiado estas_demasiado 15
if ( #true in #result )
     {
       if ( aplicas_las in #result || pones_el_vendas in #result )
            {
              wait 8s
            }
       if ( curas_a in #result || pero_fallas in #result )
            {
              return
            }
       if ( no_necesita_curarse in #result || estas_demasiado in #result || you_can in #result )
            {
              wait 6s
              return
            }
     }
return

;=====================================================
; Rutina para, en caso de hambre, comer hasta saciarse
;=====================================================
; v2.1
sub comprobar_comida
{
  hambriento:
  set %jrnl #jindex ; Marcamos un índice de las líneas del diario.
  msg .hungry $
  wait 20
  while #true
     {
       if #jindex > %jrnl ; Si aparece una nueva línea.
          {
            set %jrnl %jrnl + 1  ; Seleccionamos ese numero de línea.
             scanjournal %jrnl   ; La leemos...
            if Estas_no_le_afecta_el_hambre in #journal || Estas_tan_lleno_que_no_puedes in #journal || Estas_totalmente_saciado in #journal
               {
                 set %proxima_vez %tiempo_actual + %tiempo_alimentacion
                 return
               }
               else
                  {
                    if Estas_lleno in #journal || Estas_contento in #journal || Estas_en_inanicion in #journal || Estas_hambriento in #journal || Sientes_mucho in #journal || Estas_con_hambre in #journal || Estas_parcialmente in #journal || Estas_bien_lleno in #journal || Te_sientes_casi_lleno in #journal
                       {
                         finditem %comida C_ , #backpackid
                         if #findcnt > 0
                            {
                              set #lobjectid #findid
                              event macro 17
                              wait 20
                              goto hambriento
                            }
                            else
                               {
                                 event exmsg #charid 3 48 COMPRA COMIDA!!
                                 wait 40
                                 set %proxima_vez %tiempo_actual + %tiempo_alimentacion
                               }
                       }
                       else ; Mensaje extraño, repetimos...
                          {
                            goto hambriento
                          }
                  }
          }
       return
     } ; FIN While
}
return

;======================================================================
sub wait_for
;=================================================================
; This "wait_for" sub package was created by Locke. If you use these subs please keep this header intact.
; // end header
; Documentation: the sub package grew to large with all the comments. To load them call the sub like this:
; gosub wait_for docs    | or you can use doc, documention, what, or my personal favorite, kickass.
; Thanks to ~BookWibble~ for helping with all the debugging and spotting a bug or three.
; "wait_for core dispatcher" version 1.3 by Locke
if %1 = doc || if %1 = docs || if %1 = documentation || if %1 = what || if %1 = kickass
{
Display ok Please click ok and wait for your browser to start.
execute http://www.easyuo.com/forum/viewtopic.php?t=24716
halt
}
nameSpace Push
namespace local LLNS
set #result N/A ; if #result isn't set by one of my wait_for subs it'll throw an error.
set !LPC #lpc
set #lpc 200
for %i 0 %0
set !_A . %i % . %i
gosub wait_for_ , !_A1
ignoreitem reset LLWAITFOR
set #lpc !lpc
namespace clear LLNS
namespace pop
if #result <> N/A
return #result
else
display ok You specified an unknown wait_for command. Script returned #result and is halting.
halt

;======================================================================
sub wait_for_MSG ; version 1.4 ~Locke
;=================================================================
if !_A0 < 3
{
display ok You haven't specified enough vars.$
+The basic format is: gosub wait_for MSG %message % , time_out_in_seconds$
+Script is halting
halt
}
set !_timeout ( #scnt + !_A . !_A0 )
_lets_wait_for_a_message:
for %i %jstart #jindex
{
 scanjournal %i
  for %ii 2 !_A0
  {
    if !_A . %ii in #journal && %jstart <> %i
    set #result #true , #spc , !_A . %ii
  }
}

if #true notin #result
{
set #result #false
 if !_timeout =< #scnt
 return #result
wait 1
goto _lets_wait_for_a_message
}
else
return #result

wait 1
goto _lets_wait_for_a_message


;======================================================================
sub wait_for_GUMP ; version 1.4 ~Locke
;=================================================================
if !_A0 < 3
{
display ok You haven't specified enough vars.$
+The basic format is: gosub wait_for GUMP XXX_YYY % , time_out_in_seconds$
+Script is halting
halt
}
if !_A3 <> CLOSE
set !_timeout #scnt + !_A3
else
set !_timeout 0 ; no gump wait if %3 = CLOSE since we already believe it to be open.

_lets_wait_for_a_gump:
if #CONTSIZE = !_A2 || #CONTKIND = !_A2 || #CONTNAME = !_A2 || #CONTTYPE = !_A2
{
  if !_A5 <> N/A && !_A6 <> N/A
  {
  set !clickx !_A5 + #contposx
  set !clicky !_A6 + #contposy
  click !clickx !clicky
  }
  if !_A3 = CLOSE || if !_A4 = CLOSE || !_A5 = CLOSE || !_A6 = CLOSE
  {
  set !string #contsize
  str pos !string _
  set !pos #strres
  str del !string #strres #strres
  set !clickX #contposx + ( #strres / 2 )
  str del !string 1 !pos
  set !clickY #contposy + ( #strres / 2 )
  click !clickx !clicky R
  }
return #true
}

if !_timeout =< #scnt && !_A4 = N/A
return #false

if !_A4 <> N/A && !_timeout =< #scnt
{
finditem !_A4
 if #findkind <> -1
 {
  for #findindex 1 #findcnt
  {
   if #finddist > 2
   ignoreitem #findid LLWAITFOR
   else
   break
  }
  set #lobjectid #findid
  event macro 17 0
  set !_timeout #scnt + !_A3
 }
 else
 return #false
}
wait 1
goto _lets_wait_for_a_gump

;======================================================================
sub wait_for_HOTKEY ; Version 0.8 ~Locke
;=================================================================
if !_A0 < 4
{
display ok You haven't specified enough vars.$
+The basic format is: gosub wait_for HOTKEY KEY ACTION % , time_out_in_seconds$
+Script is halting
halt
}
set #lpc 300
set %key_pressed N/A
set !_Timeout !_A . !_A0 + #scnt
repeat
{
 for %i 2 !_A0
 {
 set !_key !_A . %i
 onhotkey !_key
 set %key_pressed !_Key
 }
}
until !_timeout =< #scnt || %key_pressed <> N/A
if %key_pressed <> N/A
{
for !i 2 !_A0
{
set !key_pos !_A . !i
if %key_pressed in !key_pos
break
}
set !i !i + 1
set !next_var !_A . !i
}
if set in !next_var && %key_pressed <> N/A
{
set !string !next_var
str pos !string _
str del !string 1 #strres
set !string #strres
str pos !string _
set !pos #strres - 1
set !realpos #strres
str left !string !pos
set !var #strres
str del !string 1 !realpos
set % . !var #strres
return % . !var
}
if %key_pressed <> N/A
return !next_var

return #false


;======================================================================
sub wait_for_ITEM ; Version 0.1 ~Locke
;=================================================================
; %A2 = #findid ; %A3 = C_ , %mod || G_ , %mod ; %A4 = wait_time in seconds
if !_A0 < 4
{
display ok You haven't specified enough vars.$
+The basic format is: gosub wait_for ITEM # , findid C_ , % , mod % , timeout
+Script is halting
halt
}
set !_timeout !_A4 + #scnt
repeat
{
finditem !_A2 !_A3
if #findkind <> -1
return #true
wait 1
}
until #scnt => !_timeout
return #false


;======================================================================
sub wait_for_RECALL ; Version 0.1 ~Locke
;=================================================================
; %A2 = wait_time in seconds
if !_A0 < 2
{
display ok You haven't specified enough vars.$
+The basic format is: gosub wait_for RECALL % , timeout
+Script is halting
halt
}
set !_timeout !_A2 + #scnt
set !old_POS_X #charposx
set !old_POS_Y #charposy
set !old_pos_Z #charposz
repeat
{
if #CHARPOSX <> !old_POS_X || #CHARPOSY <> !old_POS_Y || #CHARPOSZ <> !old_POS_Z
return #true
wait 1
}
until #scnt => !_timeout
return #false

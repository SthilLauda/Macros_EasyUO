;===========================
; Script: Ganzúas y Engranajes + [ Fabrica DEEDS de Comodidad ]
; Author: Sthil Lauda
; Version: 1.1
; Client Tested with: 2.0.3
; EUO version tested with: EasyUO 1.5 Version 243
; Shard: Ultima Alianza (¡Hasta la muerte!)
; Revision Date: 07/11/2019
; Public Release: 07/11/2019
; Purpose: Fabrica ganzúas o engranajes y las mete en Deeds de comodidad :-)
;________________________________
;
; ///////////////////////////////
; ******** CONFIGURACIÓN ********
; ///////////////////////////////
;________________________________
;
set %producto 1              ; [ 1 = Engranajes / 2 = Ganzuas ]
set %cofre UXVXMND           ; Cofre con lingotes de Hierro
set %bolsa_deeds MQPKOND     ; ID con la bolsa de DEEDS vacíos.
set %limite_producto 100     ; Máximo de engranajes o ganzúas en la mochila.
set %tamano_deed 1000        ; Tamaño del DEED que va a llenar con engranajes o ganzúas.
set %tiempo_alimentacion 360 ; Cada cuántos segundos va a comprobar si tiene hambre (5 minutos).
;________________________________________________
;
; //////////////////////////////////////////////
; ************* FIN CONFIGURACIÓN *************
; //////////////////////////////////////////////
;________________________________________________
;
set %comida RGG_NRD_QSD_ZBG_WLI
 +_QRD_END_FUD_YLI_WLI_HGI_JQE
 +_KGI_EGI_QLI_KLI_MLI_KRD_HQD
 +_AQD_MQE_VQE_TQE_IQE_PQD_QQD
 +_GQE_SPE_ZPE_OQE_BDF_KPE_RQE
 +_YSD_SQD_YWI_AXI                ; ID's de alimentos
set %tiempo_actual #SCNT          ; Reloj
set %proxima_vez #SCNT            ; Reloj
set %producto_guardar RCG_NWH
set %hierro RMK
set %herramienta GTL
set %start #TRUE
set #LPC 500

initevents

set #SYSMSGCOL 88
event sysmessage Comienza la Macro!!
wait 2s

inicio:
gosub checkHungry
gosub Herramientas
gosub HacerProducto
goto inicio

sub Herramientas ;<=========================>
ciclo:
gosub ReponerMaterial
finditem %herramienta C_ , #BACKPACKID
if #FINDCNT < 2
{
set #LOBJECTID #FINDID
event macro 17
gosub wait_for GUMP 530_480 50
click 70 170
gosub wait_for GUMP 530_480 50
click 430 350
gosub wait_for GUMP 530_480 50
click 270 190
gosub wait_for GUMP 530_480 50
click 270 190
gosub wait_for GUMP 530_480 50
click 270 190
gosub wait_for GUMP 530_480 50
set %start #TRUE
goto ciclo
}
return

sub HacerProducto ;<=========================>
gosub dejarProducto
if #CONTSIZE <> 530_480
   {
     finditem %herramienta C_ , #BACKPACKID
     set #LOBJECTID #FINDID
     event macro 17
     gosub wait_for GUMP 530_480 50
   }
if %producto = 1
   {
     if %start
        {
          click 70 150
          gosub wait_for GUMP 530_480 50
          set %start #FALSE
        }
     click 270 150
     gosub wait_for GUMP 530_480 50
     return
   }
if %producto = 2
   {
     if %start
        {
          click 70 170
          gosub wait_for GUMP 530_480 50
          set %start #FALSE
        }
     click 270 150
     gosub wait_for GUMP 530_480 50
     return
   }
return

sub makeDeed ;<=========================>
finditem %producto_guardar C_ , %bolsa
if #FINDSTACK >= %tamano_deed
{
  _cogeDeed:
  finditem TVH C_ , #BACKPACKID
  if #FINDCNT = 0 && #FINDCOL <> 436 ; No hay ningún Deed vacío
     {
       finditem TVH C_ , %bolsa_deeds
       if #FINDCNT > 0 && #FINDCOL = 436 ; Deed vacío
          {
            exevent drag #FINDID 1
            exevent dropc #BACKPACKID
            wait 30
            goto _cogeDeed
          }
     }
  _makeDeed:
  finditem TVH C_ , #BACKPACKID
  if #FINDCNT > 0 && #FINDCOL = 436 ; Deed vacío
     {
       set #LOBJECTID #FINDID
       finditem %producto_guardar C_ , %bolsa
       if #FINDSTACK >= %tamano_deed
          {
            event macro 17
            target
            set #LTARGETID #FINDID
            set #LTARGETKIND 1
            event macro 22
            wait 30
            goto _makeDeed
          }
     }
  _dropDeed:
  finditem TVH C_ , #BACKPACKID
  if #FINDCNT > 0 && #FINDCOL = 34 ; Deed completado
     {
       exevent drag #FINDID #FINDSTACK
       exevent dropc %bolsa
       wait 30
       goto _dropDeed
     }

}
return

sub checkHungry ;<=========================>
set %tiempo_actual #SCNT
if ( %proxima_vez <= %tiempo_actual )
     {
       gosub comprobar_comida
     }
return

sub dejarProducto ;<=========================>
_dejar:
finditem %producto_guardar C_ , #BACKPACKID
if #FINDSTACK >= %limite_producto
   {
     exevent drag #FINDID #FINDSTACK
     exevent dropc %bolsa
     wait 30
     goto _dejar
   }
gosub makeDeed
return

sub ReponerMaterial ;<=========================>
_rePon:
finditem %hierro C_ , #BACKPACKID
if #FINDSTACK < 5
   {
     finditem %hierro C_ , %cofre
     if #FINDSTACK >= 50
        {
          exevent drag #FINDID 50
          exevent dropc #BACKPACKID
          wait 30
          goto _rePon
        }
        else
           {
             set #SYSMSGCOL 38
             event sysmessage NO QUEDA HIERRRO!
             halt
           }
   }
return

;=====================================================
; Rutina para, en caso de hambre, comer hasta saciarse
;=====================================================
; v2.4
sub comprobar_comida
{
  hambriento:
  set %jrnl #JINDEX ; Marcamos un índice de las líneas del diario.
  event macro 4 0 .hungry
  wait 20
  while #TRUE
     {
       if #JINDEX > %jrnl ; Si aparece una nueva línea.
          {
            set %jrnl %jrnl + 1  ; Seleccionamos ese numero de línea.
            scanjournal %jrnl   ; La leemos...
            if Dentro_de_1_minuto in #JOURNAL
               {
                 wait 120s ; Save del server...
               }
            if no_te_puedes_comer_eso in #JOURNAL
               {
                 event exmsg #CHARID 3 48 ESTO NO ES COMIDA!!
                 wait 40
                 ignoreitem #FINDID ComidaID ; Lo guardamos en una lista de ID's que no se pueden comer [ ignoreitem reset ComidaID ].
                 goto hambriento
               }
            if Estas_no_le_afecta_el_hambre in #JOURNAL || Estas_tan_lleno_que_no_puedes in #JOURNAL || Estas_totalmente_saciado in #JOURNAL
               {
                 set %proxima_vez %tiempo_actual + %tiempo_alimentacion
                 return
               }
               else
                  {
                    if Estas_lleno in #JOURNAL || Estas_contento in #JOURNAL || Estas_en_inanicion in #JOURNAL || Estas_hambriento in #JOURNAL || Sientes_mucho in #JOURNAL || Estas_con_hambre in #JOURNAL || Estas_parcialmente in #JOURNAL || Estas_bien_lleno in #JOURNAL || Te_sientes_casi_lleno in #JOURNAL
                       {
                         finditem %comida C_ , #BACKPACKID
                         if #findcnt > 0
                            {
                              set #LOBJECTID #FINDID
                              event macro 17
                              goto hambriento ; Seguimos comiendo...
                            }
                            else
                               {
                                 event exmsg #CHARID 3 48 COMPRA COMIDA!!
                                 wait 40
                                 set %proxima_vez %tiempo_actual + %tiempo_alimentacion
                               }
                       }
                       else ; Mensaje extraño, repetimos...
                          {
                            goto hambriento
                          }
                  }
          }
       return
     } ; FIN While
}
return

;=================================================================
sub wait_for
;=================================================================
; This "wait_for" sub package was created by Locke. If you use these subs please keep this header intact.
; // end header
; Documentation: the sub package grew to large with all the comments. To load them call the sub like this:
; gosub wait_for docs    | or you can use doc, documention, what, or my personal favorite, kickass.
; Thanks to ~BookWibble~ for helping with all the debugging and spotting a bug or three.
; "wait_for core dispatcher" version 1.3 by Locke
if %1 = doc || if %1 = docs || if %1 = documentation || if %1 = what || if %1 = kickass
{
Display ok Please click ok and wait for your browser to start.
execute http://www.easyuo.com/forum/viewtopic.php?t=24716
halt
}
nameSpace Push
namespace local LLNS
set #result N/A ; if #result isn't set by one of my wait_for subs it'll throw an error.
set !LPC #lpc
set #lpc 200
for %i 0 %0
set !_A . %i % . %i
gosub wait_for_ , !_A1
ignoreitem reset LLWAITFOR
set #lpc !lpc
namespace clear LLNS
namespace pop
if #result <> N/A
return #result
else
display ok You specified an unknown wait_for command. Script returned #result and is halting.
halt

;======================================================================
sub wait_for_MSG ; version 1.4 ~Locke
;=================================================================
if !_A0 < 3
{
display ok You haven't specified enough vars.$
+The basic format is: gosub wait_for MSG %message % , time_out_in_seconds$
+Script is halting
halt
}
set !_timeout ( #scnt2 + !_A . !_A0 )
_lets_wait_for_a_message:
for %i %jstart #jindex
{
 scanjournal %i
  for %ii 2 !_A0
  {
    if !_A . %ii in #journal && %jstart <> %i
    set #result #true , #spc , !_A . %ii
  }
}

if #true notin #result
{
set #result #false
 if !_timeout =< #scnt2
 return #result
wait 1
goto _lets_wait_for_a_message
}
else
return #result

wait 1
goto _lets_wait_for_a_message


;======================================================================
sub wait_for_GUMP ; version 1.4 ~Locke
;=================================================================
if !_A0 < 3
{
display ok You haven't specified enough vars.$
+The basic format is: gosub wait_for GUMP XXX_YYY % , time_out_in_seconds$
+Script is halting
halt
}
if !_A3 <> CLOSE
set !_timeout #scnt2 + !_A3
else
set !_timeout 0 ; no gump wait if %3 = CLOSE since we already believe it to be open.

_lets_wait_for_a_gump:
if #CONTSIZE = !_A2 || #CONTKIND = !_A2 || #CONTNAME = !_A2 || #CONTTYPE = !_A2
{
  if !_A5 <> N/A && !_A6 <> N/A
  {
  set !clickx !_A5 + #contposx
  set !clicky !_A6 + #contposy
  click !clickx !clicky
  }
  if !_A3 = CLOSE || if !_A4 = CLOSE || !_A5 = CLOSE || !_A6 = CLOSE
  {
  set !string #contsize
  str pos !string _
  set !pos #strres
  str del !string #strres #strres
  set !clickX #contposx + ( #strres / 2 )
  str del !string 1 !pos
  set !clickY #contposy + ( #strres / 2 )
  click !clickx !clicky R
  }
return #true
}

if !_timeout =< #scnt2 && !_A4 = N/A
return #false

if !_A4 <> N/A && !_timeout =< #scnt2
{
finditem !_A4
 if #findkind <> -1
 {
  for #findindex 1 #findcnt
  {
   if #finddist > 2
   ignoreitem #findid LLWAITFOR
   else
   break
  }
  set #lobjectid #findid
  event macro 17 0
  set !_timeout #scnt2 + !_A3
 }
 else
 return #false
}
wait 1
goto _lets_wait_for_a_gump

;======================================================================
sub wait_for_HOTKEY ; Version 0.8 ~Locke
;=================================================================
if !_A0 < 4
{
display ok You haven't specified enough vars.$
+The basic format is: gosub wait_for HOTKEY KEY ACTION % , time_out_in_seconds$
+Script is halting
halt
}
set #lpc 300
set %key_pressed N/A
set !_Timeout !_A . !_A0 + #scnt
repeat
{
 for %i 2 !_A0
 {
 set !_key !_A . %i
 onhotkey !_key
 set %key_pressed !_Key
 }
}
until !_timeout =< #scnt || %key_pressed <> N/A
if %key_pressed <> N/A
{
for !i 2 !_A0
{
set !key_pos !_A . !i
if %key_pressed in !key_pos
break
}
set !i !i + 1
set !next_var !_A . !i
}
if set in !next_var && %key_pressed <> N/A
{
set !string !next_var
str pos !string _
str del !string 1 #strres
set !string #strres
str pos !string _
set !pos #strres - 1
set !realpos #strres
str left !string !pos
set !var #strres
str del !string 1 !realpos
set % . !var #strres
return % . !var
}
if %key_pressed <> N/A
return !next_var

return #false


;======================================================================
sub wait_for_ITEM ; Version 0.1 ~Locke
;=================================================================
; %A2 = #findid ; %A3 = C_ , %mod || G_ , %mod ; %A4 = wait_time in seconds
if !_A0 < 4
{
display ok You haven't specified enough vars.$
+The basic format is: gosub wait_for ITEM # , findid C_ , % , mod % , timeout
+Script is halting
halt
}
set !_timeout !_A4 + #scnt
repeat
{
finditem !_A2 !_A3
if #findkind <> -1
return #true
wait 1
}
until #scnt => !_timeout
return #false


;======================================================================
sub wait_for_RECALL ; Version 0.1 ~Locke
;=================================================================
; %A2 = wait_time in seconds
if !_A0 < 2
{
display ok You haven't specified enough vars.$
+The basic format is: gosub wait_for RECALL % , timeout
+Script is halting
halt
}
set !_timeout !_A2 + #scnt
set !old_POS_X #charposx
set !old_POS_Y #charposy
set !old_pos_Z #charposz
repeat
{
if #CHARPOSX <> !old_POS_X || #CHARPOSY <> !old_POS_Y || #CHARPOSZ <> !old_POS_Z
return #true
wait 1
}
until #scnt => !_timeout
return #false
